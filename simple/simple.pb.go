// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simple.proto

package simple

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 请求结构
type SimpleRequest struct {
	Typeid               int64    `protobuf:"varint,1,opt,name=typeid" json:"typeid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRequest) Reset()         { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()    {}
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_simple_0ad5112aafeca5be, []int{0}
}
func (m *SimpleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRequest.Unmarshal(m, b)
}
func (m *SimpleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRequest.Marshal(b, m, deterministic)
}
func (dst *SimpleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRequest.Merge(dst, src)
}
func (m *SimpleRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRequest.Size(m)
}
func (m *SimpleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRequest proto.InternalMessageInfo

func (m *SimpleRequest) GetTypeid() int64 {
	if m != nil {
		return m.Typeid
	}
	return 0
}

// 返回数据类型
type GetData struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetData) Reset()         { *m = GetData{} }
func (m *GetData) String() string { return proto.CompactTextString(m) }
func (*GetData) ProtoMessage()    {}
func (*GetData) Descriptor() ([]byte, []int) {
	return fileDescriptor_simple_0ad5112aafeca5be, []int{1}
}
func (m *GetData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetData.Unmarshal(m, b)
}
func (m *GetData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetData.Marshal(b, m, deterministic)
}
func (dst *GetData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetData.Merge(dst, src)
}
func (m *GetData) XXX_Size() int {
	return xxx_messageInfo_GetData.Size(m)
}
func (m *GetData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetData.DiscardUnknown(m)
}

var xxx_messageInfo_GetData proto.InternalMessageInfo

func (m *GetData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 响应结构
type SimpleReply struct {
	// repeated重复(数组)
	UserList             []*GetData `protobuf:"bytes,1,rep,name=user_list,json=userList" json:"user_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SimpleReply) Reset()         { *m = SimpleReply{} }
func (m *SimpleReply) String() string { return proto.CompactTextString(m) }
func (*SimpleReply) ProtoMessage()    {}
func (*SimpleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_simple_0ad5112aafeca5be, []int{2}
}
func (m *SimpleReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleReply.Unmarshal(m, b)
}
func (m *SimpleReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleReply.Marshal(b, m, deterministic)
}
func (dst *SimpleReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleReply.Merge(dst, src)
}
func (m *SimpleReply) XXX_Size() int {
	return xxx_messageInfo_SimpleReply.Size(m)
}
func (m *SimpleReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleReply.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleReply proto.InternalMessageInfo

func (m *SimpleReply) GetUserList() []*GetData {
	if m != nil {
		return m.UserList
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "simple.SimpleRequest")
	proto.RegisterType((*GetData)(nil), "simple.GetData")
	proto.RegisterType((*SimpleReply)(nil), "simple.SimpleReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Simple service

type SimpleClient interface {
	// 定义 SayTest 方法
	SayTest(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error)
}

type simpleClient struct {
	cc *grpc.ClientConn
}

func NewSimpleClient(cc *grpc.ClientConn) SimpleClient {
	return &simpleClient{cc}
}

func (c *simpleClient) SayTest(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := grpc.Invoke(ctx, "/simple.Simple/SayTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Simple service

type SimpleServer interface {
	// 定义 SayTest 方法
	SayTest(context.Context, *SimpleRequest) (*SimpleReply, error)
}

func RegisterSimpleServer(s *grpc.Server, srv SimpleServer) {
	s.RegisterService(&_Simple_serviceDesc, srv)
}

func _Simple_SayTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).SayTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.Simple/SayTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).SayTest(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Simple_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simple.Simple",
	HandlerType: (*SimpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayTest",
			Handler:    _Simple_SayTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple.proto",
}

func init() { proto.RegisterFile("simple.proto", fileDescriptor_simple_0ad5112aafeca5be) }

var fileDescriptor_simple_0ad5112aafeca5be = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd4, 0xb9, 0x78,
	0x83, 0xc1, 0xac, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x31, 0x2e, 0xb6, 0x92, 0xca,
	0x82, 0xd4, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x28, 0x4f, 0x49, 0x97, 0x8b,
	0xdd, 0x3d, 0xb5, 0xc4, 0x25, 0xb1, 0x24, 0x51, 0x88, 0x8f, 0x8b, 0x09, 0x2e, 0xcd, 0x94, 0x99,
	0x22, 0x24, 0xc4, 0xc5, 0x92, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x19, 0x04,
	0x66, 0x2b, 0x59, 0x73, 0x71, 0xc3, 0xcc, 0x2d, 0xc8, 0xa9, 0x14, 0xd2, 0xe1, 0xe2, 0x2c, 0x2d,
	0x4e, 0x2d, 0x8a, 0xcf, 0xc9, 0x2c, 0x2e, 0x91, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0xe2, 0xd7,
	0x83, 0x3a, 0x08, 0x6a, 0x6c, 0x10, 0x07, 0x48, 0x85, 0x4f, 0x66, 0x71, 0x89, 0x91, 0x23, 0x17,
	0x1b, 0x44, 0xb3, 0x90, 0x39, 0x17, 0x7b, 0x70, 0x62, 0x65, 0x08, 0xc8, 0x61, 0xa2, 0x30, 0xf5,
	0x28, 0xee, 0x95, 0x12, 0x46, 0x17, 0x2e, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0x7b, 0xd3,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x35, 0x69, 0x07, 0xf6, 0x00, 0x00, 0x00,
}
